name: build release, release image to DockerHub
on:
  release:
    types:
      - published
env:
  CONTAINER_RUN_OPTIONS: " "

jobs:
  release-assests:
    name: release kubeedge components
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        target:
          - kubeedge
          - edgesite
          - keadm
        os:
          - linux
        arch:
          - amd64
          # - arm64
          # - arm
        ARM_VERSION:
          - GOARM7
          - GOARM8
          - ""
    steps:
      - name: checkout code
        uses: actions/checkout@v2
        with:
          # fetch-depth:
          # 0 indicates all history for all branches and tags.
          # for `git describe --tags` in Makefile.
          fetch-depth: 0
      - name: Making and packaging
        run: |
          docker pull kubeedge/build-tools
          make release WHAT=${{ matrix.target }} ARM_VERSION=${{ matrix.ARM_VERSION }}
      - name: Generate arch
        run: |
          if [ "${{ matrix.ARM_VERSION }}" = "GOARM7" ]; then echo "output_arch=arm" >> $GITHUB_ENV; elif [ ${{ matrix.ARM_VERSION }} = "GOARM8" ]; then echo "output_arch=arm64" >> $GITHUB_ENV; else echo "output_arch=amd64" >> $GITHUB_ENV; fi
      - name: Generate hashes
        shell: bash
        id: hash
        run: |
          # sha256sum generates sha256 hash for all artifacts.
          # base64 -w0 encodes to base64 and outputs on a single line.
          # sha256sum artifact1 artifact2 ... | base64 -w0
          cp _output/release/${{ github.ref_name }}/${{ matrix.target }}-${{ github.ref_name }}-${{ matrix.os }}-${{ env.output_arch }}.tar.gz .
          sha256sum ${{ matrix.target }}-${{ github.ref_name }}-${{ matrix.os }}-${{ env.output_arch}}.tar.gz >> SHA256SUM-${{ matrix.target }}-${{ github.ref_name }}-${{ matrix.os }}-${{ env.output_arch }}.md
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}-${{ github.ref_name }}-${{ matrix.os }}-${{ env.output_arch }}.tar.gz
          path: _output/release/${{ github.ref_name }}/${{ matrix.target }}-${{ github.ref_name }}-${{ matrix.os }}-${{ env.output_arch }}.tar.gz
          if-no-files-found: error
          retention-days: 5
      - name: Upload SHA256SUM
        uses: actions/upload-artifact@v3
        with:
          name: SHA256SUM-${{ matrix.target }}-${{ github.ref_name }}-${{ matrix.os }}-${{ env.output_arch }}.md
          path: SHA256SUM-${{ matrix.target }}-${{ github.ref_name }}-${{ matrix.os }}-${{ env.output_arch }}.md
          if-no-files-found: error
          retention-days: 5
      - name: Uploading assets...
        if: ${{ !env.ACT }}
        uses: softprops/action-gh-release@v1
        with:
          files: |
            _output/release/${{ github.ref_name }}/${{ matrix.target }}-${{ github.ref_name }}-${{ matrix.os }}-${{ env.output_arch }}.tar.gz
            _output/release/${{ github.ref_name }}/checksum_${{ matrix.target }}-${{ github.ref_name }}-${{ matrix.os }}-${{ env.output_arch }}.tar.gz.txt
  build-hash:
    name: build base64 subjects for provenance
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    runs-on: ubuntu-18.04
    needs: [release-assests]
    steps:
      # Download all artifacts to specify working directory
      - uses: actions/download-artifact@v3
        with:
          path: ${{ github.workspace }}/slsa/artifacts
      - name: build hash
        id: hash
        run: |
          cp  `find ${{ github.workspace }}/slsa/artifacts -mindepth 2 -type f` .
          cat SHA256SUM-*.md >> SHA256SUM.md
          echo "::set-output name=hashes::$(cat SHA256SUM.md | base64 -w0)"
  # This step calls the generic workflow to generate provenance.
  provenance:
    needs: [build-hash]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.2.0
    with:
      base64-subjects: "${{ needs.build-hash.outputs.hashes }}"
      # Upload provenance to a new release
      upload-assets: true
      compile-generator: true
  publish-image-to-dockerhub:
    name: publish to DockerHub
    strategy:
      matrix:
        target:
          - cloudcore
          - admission
          - edgesite-agent
          - edgesite-server
          - csidriver
          - iptablesmanager
          - edgemark
          - installation-package
          - controllermanager
    runs-on: ubuntu-18.04
    steps:
      - name: checkout code
        uses: actions/checkout@v2
        with:
          # fetch-depth:
          # 0 indicates all history for all branches and tags.
          # for `git describe --tags` in Makefile.
          fetch-depth: 0
      - name: install QEMU
        uses: docker/setup-qemu-action@v1
      - name: install Buildx
        uses: docker/setup-buildx-action@v1
      - name: login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER_NAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: build and publish images
        env:
          IMAGE_REPO_NAME: kubeedge
        run: make crossbuildimage WHAT=${{ matrix.target }}
