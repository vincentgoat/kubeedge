/*
Copyright The KubeEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubeedge/kubeedge/pkg/apis/policy/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AccessMixerLister helps list AccessMixers.
// All objects returned here must be treated as read-only.
type AccessMixerLister interface {
	// List lists all AccessMixers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccessMixer, err error)
	// AccessMixers returns an object that can list and get AccessMixers.
	AccessMixers(namespace string) AccessMixerNamespaceLister
	AccessMixerListerExpansion
}

// accessMixerLister implements the AccessMixerLister interface.
type accessMixerLister struct {
	indexer cache.Indexer
}

// NewAccessMixerLister returns a new AccessMixerLister.
func NewAccessMixerLister(indexer cache.Indexer) AccessMixerLister {
	return &accessMixerLister{indexer: indexer}
}

// List lists all AccessMixers in the indexer.
func (s *accessMixerLister) List(selector labels.Selector) (ret []*v1alpha1.AccessMixer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccessMixer))
	})
	return ret, err
}

// AccessMixers returns an object that can list and get AccessMixers.
func (s *accessMixerLister) AccessMixers(namespace string) AccessMixerNamespaceLister {
	return accessMixerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AccessMixerNamespaceLister helps list and get AccessMixers.
// All objects returned here must be treated as read-only.
type AccessMixerNamespaceLister interface {
	// List lists all AccessMixers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccessMixer, err error)
	// Get retrieves the AccessMixer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AccessMixer, error)
	AccessMixerNamespaceListerExpansion
}

// accessMixerNamespaceLister implements the AccessMixerNamespaceLister
// interface.
type accessMixerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AccessMixers in the indexer for a given namespace.
func (s accessMixerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AccessMixer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccessMixer))
	})
	return ret, err
}

// Get retrieves the AccessMixer from the indexer for a given namespace and name.
func (s accessMixerNamespaceLister) Get(name string) (*v1alpha1.AccessMixer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("accessmixer"), name)
	}
	return obj.(*v1alpha1.AccessMixer), nil
}
